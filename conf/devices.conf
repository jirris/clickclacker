[DEFAULT]
# Default settings for all devices.
# Use in DEFAULT or with each device, or both. Device setting overrides DEFAULT.
#
# Note that you can add any device config in DEFAULT and only configure differences under specific device
#
# Default hours for heating, if temperature data is missing or temperature adjustments not used. Wind backups to 0 if data not available.
hours=14
# Adjust on hours based on temperature (n=off, y=on). Defaults to off if missing in config.
adj_temp=n
# Adjust on hours based on wind (n=off, y=on). Defaults to off if missing in config.
adj_chill=n
# If schedule setting fails, which state device defaults to (on/off). Defaults to on if missing in config.
backup=y
# By default, repeat commands each hour. Defaults to on if missing in config.
repeat=y

# Prioritize some hours, so that cheapest hours are selected from this list, first and from rest of hours only if list runs out.
# Use priority setting (n=off, y=on). Defaults to off if missing in config.
priority=n
# List the hours in 0-23 format
priority_hours=16,17,18,19,21

# Use schedule only on certain days. For example if you want to run schedule only in Friday and Sunday.
# Default is off (n=off, y=on). Defaults to off if missing in config.
fixed_days=n
# Fixed days list
fixed_days_list=mon,tue,fri

# By default, static schedule is not used (see example for static schedule below). Defaults to off if missing in config.
static=n

# Delay for start can be used, if for example loads that came up same time may create too large spike on load.
# This can be configured per device and is by default 0. Values between 0-3600 secs
#delay=0
# External command for load when setting changes, this is mandatory for all devices and DEFAULTS are here just for failsafe
on=bash scripts/test.sh LoadOn
off=bash scripts/test.sh LoadFF

# Limit by price, you may either force on independent from hours calculation if price is below limit, or force
# off if price is above limit. By default limiter is disabled and can be enabled under devices or here for all devices
# Note that this affects also static schedules. Defaults to off if missing in config.
pricelimit=n
# Limit for highest price, prices over this will adjust to off of price is higher. Use "n" if not used but lowerlimit is used.
upperlimit=10.0
# Limit for low price, prices below this will adjust to on of price is lower or equal. Use "n" if not used but upperlimit is used.
lowerlimit=n

# Force maximum off hours: in how often device must go on. For example setting 3 means 3am, 6am, 9am, 12pm, 3pm, 6pm...
# Note that this overrides all other settings. Defaults to off if missing in config.
force=n
# Distance between forced on setting
forceh=3

# General settings. THESE SETTING ARE MANDATORY:
# Timezone as in standard time (2=EEST)
timezone=2
# Enable email alerts for errors:
emailon=n
# email for alerts
email=x.x@gmail.com
# email smtp server, tested with gmail
emailserver=smtp.gmail.com
# email password
emailpassword=xxxx
# Emails in HTML format (y/n)
html=y

# Schedule and price information is stored in data/schedule file. You can use this for example to create simple webpage
# to publish current schedule and prices (example for linux in tools as tinywebserver.sh).
# File is always created, but overwrites old one. If you want to store old ones in data/history, enable setting.
history=y
# Enable Callmebot alerts to Whatsapp, Telegram or Signal (see. https://callmebot.com how to creta account)
callmebot=n
# Apikey from Callmebot
api_key=xxxxxx
# Phonenumber or Telegram username
phone_number=xxxxxx
# Service to use whatsapp/signal/telegram
service=whatsapp

# log file locations
log=log/info.log
errorlog=log/error.log

# Write messages also to console
consoleon=y

# File containing average daily temperatures
temp_file=data_sources/temperature
# File containing daily wind speed and direction
wind_file=data_sources/wind
# Todays price file (json)
jsonToday=data_sources/today.json
# Tomorrows price file (json)
jsonTomorrow=data_sources/tomorrow.json
# Json item for price/rank (numeric)
json_rank=PriceWithTax
# Json item for date (%Y-%m-%dT%H:%M:%S%z)
json_date=DateTime
# Try search for new schdedule, this setting is useful if release time of new prices is known, default is 16:00 use 24-hour hour only
cron=16

# Enable automatic running of script when creating new schedule, use this for example to fetch spot price, wind and temperature
# data using included programs or your own. Or disable and use CRON for example.
fetch=y
# Needs to be executable or exec bit set, check this file as example
fetch_command=tools/fetch.sh

# Setting is used to enable using Entsoe data for spot prices (https://transparency.entsoe.eu/)
# If using this, instead your own scripts, you need to get first token form Entsoe service see:
# https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html#_authentication_and_authorisation
# Remember to still use fetch or CRON for weather
entsoe=n
# Entsoe API key
etoken=xxxx
# Entsoe target country code (see: Entso-e API docs online)
ecountry=10YFI-1--------U

#-----------Example configs---------------
#[shelly]
#static=y
#static_sche=02,04,03,04
#on=python3 scripts/shelly.py 192.168.178.1 on 0
#off=python3 scripts/shelly.py 192.168.178.1 off 0

[Heatpump]
# How many hours should be on, if temperature adjustment is not used
hours=24

# Script to run when set on
# test.sh just prints log/test.log
on=bash scripts/test.sh HeatpumpON

# Script to run when set off
#on=python3 shelly 192.168.1.1 on 0 # Example for Shelly relay 0
#off=bash scripts/gpio.sh 5 on # Example for Raspberry GPIO 5 Off
off=bash scripts/test.sh HeatpumpOFF

# If schedule setting fails, which state device defaults to (on/off)
backup=on

# Enable if you plan to use static on/off schedule instead of price controlled
#static=y
#Hours for for static schedule (00-23)
#static_sche=02,04,03,04

# Temperature curve settings
# Adjust on hours based on temperature (n=off, y=on)
adj_temp=y
# How many hours on, on minimum temperature
min_temp=-20
min_hours=22
# How many hours on, on mid temperature
mid_temp=0
mid_hours=10
# How many hours on, on maximum temperature
max_temp=20
max_hours=2

# Wind chill curver settings
# Adjust on hours based on wind (n=off, y=on)
adj_chill=y
# Windchill factor by 5m/s, how much 5m/s wind lowers temperature (compensation is speed * compensation)
n_chill=-3
ne_chill=-2
e_chill=0
se_chill=0
s_chill=-0
sw_chill=-3
w_chill=-3
nw_chill=-1
# Cutoff temperature for chill factor, if temperature is higher than this, no compensation from wind is used
cutoff_chill=0

[Inverter] # Typical configuration, that uses temperature compensation only and has backup on (from default) and repeat off
repeat=n
hours=10
priority=y
priority_hours=16,17,18,19,20
on=bash scripts/test.sh InverterON
off=bash scripts/test.sh InverterOFF
backup=off
adj_temp=y
min_temp=-20
min_hours=0
mid_temp=-8
mid_hours=0
max_temp=20
max_hours=24
adj_chill=n

[Floor heating] # Typical configuration, that uses all compensations and has backup on and repeat on (from default)
hours=22
on=bash scripts/test.sh FloorON
off=bash scripts/test.sh FloorOFF
backup=on
adj_temp=y
adj_chill=y
min_temp=-20
min_hours=22
mid_temp=0
mid_hours=9
max_temp=20
max_hours=2
n_chill=-2
ne_chill=-2
e_chill=0
se_chill=0
s_chill=-0
sw_chill=-2
w_chill=-2
nw_chill=-1
cutoff_chill=0

[Car charger]
static=y
static_sche=00,01,02,03,04,05
on=bash scripts/test.sh CarON
off=bash scripts/test.sh CarOFF
pricelimit=y
upperlimit=16.8
lowerlimit=5.9
#-----------Example configs---------------
